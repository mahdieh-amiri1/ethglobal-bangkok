// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymasterChanged extends ethereum.Event {
  get params(): PaymasterChanged__Params {
    return new PaymasterChanged__Params(this);
  }
}

export class PaymasterChanged__Params {
  _event: PaymasterChanged;

  constructor(event: PaymasterChanged) {
    this._event = event;
  }

  get oldPaymaster(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPaymaster(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PeerSet extends ethereum.Event {
  get params(): PeerSet__Params {
    return new PeerSet__Params(this);
  }
}

export class PeerSet__Params {
  _event: PeerSet;

  constructor(event: PeerSet) {
    this._event = event;
  }

  get eid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get peer(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class SubscriptionMinted extends ethereum.Event {
  get params(): SubscriptionMinted__Params {
    return new SubscriptionMinted__Params(this);
  }
}

export class SubscriptionMinted__Params {
  _event: SubscriptionMinted;

  constructor(event: SubscriptionMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenURI(): string {
    return this._event.parameters[2].value.toString();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SubscriptionSpent extends ethereum.Event {
  get params(): SubscriptionSpent__Params {
    return new SubscriptionSpent__Params(this);
  }
}

export class SubscriptionSpent__Params {
  _event: SubscriptionSpent;

  constructor(event: SubscriptionSpent) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Subscription__allowInitializePathInputOriginStruct extends ethereum.Tuple {
  get srcEid(): BigInt {
    return this[0].toBigInt();
  }

  get sender(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}

export class Subscription__isComposeMsgSenderInputParam0Struct extends ethereum.Tuple {
  get srcEid(): BigInt {
    return this[0].toBigInt();
  }

  get sender(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}

export class Subscription__oAppVersionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSenderVersion(): BigInt {
    return this.value0;
  }

  getReceiverVersion(): BigInt {
    return this.value1;
  }
}

export class Subscription extends ethereum.SmartContract {
  static bind(address: Address): Subscription {
    return new Subscription("Subscription", address);
  }

  allowInitializePath(
    origin: Subscription__allowInitializePathInputOriginStruct,
  ): boolean {
    let result = super.call(
      "allowInitializePath",
      "allowInitializePath((uint32,bytes32,uint64)):(bool)",
      [ethereum.Value.fromTuple(origin)],
    );

    return result[0].toBoolean();
  }

  try_allowInitializePath(
    origin: Subscription__allowInitializePathInputOriginStruct,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowInitializePath",
      "allowInitializePath((uint32,bytes32,uint64)):(bool)",
      [ethereum.Value.fromTuple(origin)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  data(): string {
    let result = super.call("data", "data():(string)", []);

    return result[0].toString();
  }

  try_data(): ethereum.CallResult<string> {
    let result = super.tryCall("data", "data():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  endpoint(): Address {
    let result = super.call("endpoint", "endpoint():(address)", []);

    return result[0].toAddress();
  }

  try_endpoint(): ethereum.CallResult<Address> {
    let result = super.tryCall("endpoint", "endpoint():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isComposeMsgSender(
    param0: Subscription__isComposeMsgSenderInputParam0Struct,
    param1: Bytes,
    _sender: Address,
  ): boolean {
    let result = super.call(
      "isComposeMsgSender",
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address):(bool)",
      [
        ethereum.Value.fromTuple(param0),
        ethereum.Value.fromBytes(param1),
        ethereum.Value.fromAddress(_sender),
      ],
    );

    return result[0].toBoolean();
  }

  try_isComposeMsgSender(
    param0: Subscription__isComposeMsgSenderInputParam0Struct,
    param1: Bytes,
    _sender: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isComposeMsgSender",
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address):(bool)",
      [
        ethereum.Value.fromTuple(param0),
        ethereum.Value.fromBytes(param1),
        ethereum.Value.fromAddress(_sender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextNonce(param0: BigInt, param1: Bytes): BigInt {
    let result = super.call("nextNonce", "nextNonce(uint32,bytes32):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromFixedBytes(param1),
    ]);

    return result[0].toBigInt();
  }

  try_nextNonce(param0: BigInt, param1: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextNonce",
      "nextNonce(uint32,bytes32):(uint64)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oAppVersion(): Subscription__oAppVersionResult {
    let result = super.call("oAppVersion", "oAppVersion():(uint64,uint64)", []);

    return new Subscription__oAppVersionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_oAppVersion(): ethereum.CallResult<Subscription__oAppVersionResult> {
    let result = super.tryCall(
      "oAppVersion",
      "oAppVersion():(uint64,uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Subscription__oAppVersionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymaster(): Address {
    let result = super.call("paymaster", "paymaster():(address)", []);

    return result[0].toAddress();
  }

  try_paymaster(): ethereum.CallResult<Address> {
    let result = super.tryCall("paymaster", "paymaster():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  peers(eid: BigInt): Bytes {
    let result = super.call("peers", "peers(uint32):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(eid),
    ]);

    return result[0].toBytes();
  }

  try_peers(eid: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("peers", "peers(uint32):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(eid),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  subscriptionOf(tokenId: BigInt): BigInt {
    let result = super.call(
      "subscriptionOf",
      "subscriptionOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toBigInt();
  }

  try_subscriptionOf(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subscriptionOf",
      "subscriptionOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  validateSubscription(
    tokenId: BigInt,
    owner: Address,
    amount: BigInt,
  ): boolean {
    let result = super.call(
      "validateSubscription",
      "validateSubscription(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_validateSubscription(
    tokenId: BigInt,
    owner: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateSubscription",
      "validateSubscription(uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _endpoint(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class LzReceiveCall extends ethereum.Call {
  get inputs(): LzReceiveCall__Inputs {
    return new LzReceiveCall__Inputs(this);
  }

  get outputs(): LzReceiveCall__Outputs {
    return new LzReceiveCall__Outputs(this);
  }
}

export class LzReceiveCall__Inputs {
  _call: LzReceiveCall;

  constructor(call: LzReceiveCall) {
    this._call = call;
  }

  get _origin(): LzReceiveCall_originStruct {
    return changetype<LzReceiveCall_originStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get _guid(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _message(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _executor(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _extraData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class LzReceiveCall__Outputs {
  _call: LzReceiveCall;

  constructor(call: LzReceiveCall) {
    this._call = call;
  }
}

export class LzReceiveCall_originStruct extends ethereum.Tuple {
  get srcEid(): BigInt {
    return this[0].toBigInt();
  }

  get sender(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenURI(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetDelegateCall extends ethereum.Call {
  get inputs(): SetDelegateCall__Inputs {
    return new SetDelegateCall__Inputs(this);
  }

  get outputs(): SetDelegateCall__Outputs {
    return new SetDelegateCall__Outputs(this);
  }
}

export class SetDelegateCall__Inputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }

  get _delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDelegateCall__Outputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }
}

export class SetPaymasterCall extends ethereum.Call {
  get inputs(): SetPaymasterCall__Inputs {
    return new SetPaymasterCall__Inputs(this);
  }

  get outputs(): SetPaymasterCall__Outputs {
    return new SetPaymasterCall__Outputs(this);
  }
}

export class SetPaymasterCall__Inputs {
  _call: SetPaymasterCall;

  constructor(call: SetPaymasterCall) {
    this._call = call;
  }

  get _payMaster(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPaymasterCall__Outputs {
  _call: SetPaymasterCall;

  constructor(call: SetPaymasterCall) {
    this._call = call;
  }
}

export class SetPeerCall extends ethereum.Call {
  get inputs(): SetPeerCall__Inputs {
    return new SetPeerCall__Inputs(this);
  }

  get outputs(): SetPeerCall__Outputs {
    return new SetPeerCall__Outputs(this);
  }
}

export class SetPeerCall__Inputs {
  _call: SetPeerCall;

  constructor(call: SetPeerCall) {
    this._call = call;
  }

  get _eid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _peer(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetPeerCall__Outputs {
  _call: SetPeerCall;

  constructor(call: SetPeerCall) {
    this._call = call;
  }
}

export class SpendSubscriptionCall extends ethereum.Call {
  get inputs(): SpendSubscriptionCall__Inputs {
    return new SpendSubscriptionCall__Inputs(this);
  }

  get outputs(): SpendSubscriptionCall__Outputs {
    return new SpendSubscriptionCall__Outputs(this);
  }
}

export class SpendSubscriptionCall__Inputs {
  _call: SpendSubscriptionCall;

  constructor(call: SpendSubscriptionCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SpendSubscriptionCall__Outputs {
  _call: SpendSubscriptionCall;

  constructor(call: SpendSubscriptionCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
